import numpy as np

def lu_crout_decomposition(A):
    n = len(A)
    L = np.zeros((n, n))
    U = np.zeros((n, n))

    for k in range(n):
        L[k, k] = 1
        for i in range(k, n):
            L[i, k] = A[i, k] - np.dot(L[i, :k], U[:k, k])

        for j in range(k, n):
            U[k, j] = (A[k, j] - np.dot(L[k, :k], U[:k, j])) / L[k, k]

    return L, U

def forward_substitution(L, b):
    n = len(b)
    y = np.zeros(n)

    for i in range(n):
        y[i] = (b[i] - np.dot(L[i, :i], y[:i])) / L[i, i]

    return y

def backward_substitution(U, y):
    n = len(y)
    x = np.zeros(n)

    for i in range(n-1, -1, -1):
        x[i] = (y[i] - np.dot(U[i, i+1:], x[i+1:])) / U[i, i]

    return x


koefX_pers1 = int(input("Masukan koef x persamaan 1 : "))
koefY_per1 = int(input("Masukan koef y persamaan 1  : "))
koefZ_per1 = int(input("Masukan koef z persamaan 1  : "))
hasil_per1 = int(input("Masukan hasil persamaan 1   : "))
koefX_pers2 = int(input("Masukan koef x persamaan 2 : "))
koefY_pers2 = int(input("Masukan koef y persamaan 2 : "))
koefZ_pers2 = int(input("Masukan koef z persamaan 2 : "))
hasil_pers2 = int(input("Masukan hasil persamaan 2  : "))
koefX_pers3 = int(input("Masukan koef x persamaan 3 : "))
koefY_pers3 = int(input("Masukan koef y persamaan 3 : "))
koefZ_pers3 = int(input("Masukan koef z persamaan 3 : "))
hasil_pers3 = int(input("Masukan hasil persamaan 3  : "))

matriks_koef = np.array([[koefX_pers1, koefY_per1, koefZ_per1], 
                              [koefX_pers2, koefY_pers2, koefZ_pers2], 
                              [koefX_pers3, koefY_pers3, koefZ_pers3]])
matriks_hasil = np.array([hasil_per1, hasil_pers2, hasil_pers3])

matriks_L, matriks_U = lu_crout_decomposition(matriks_koef)

vektor_y = forward_substitution(matriks_L, matriks_hasil)
hasil = backward_substitution(matriks_U, vektor_y)

print("Solusi :")
print(f"X = {hasil[0]}")
print(f"Y = {hasil[1]}")
print(f"Z = {hasil[2]}")
